c
exit
char
n
pos
board.cursor_pos
s
n
board.cursor_pos
@start
@destination
board.selected_piece.pos
board.selected_piece
board.cursor_pos
@cursor_pos
@destination
s
n
c
n
c
n
c
n
s
n
board.cursor_pos == @destination
board.selected_piece.nil?
board.cursor_pos
@destination
s
n
board.cursor_pos[0] < pos [0]
board.cursor_pos[0]
s
@destination
n
@destination
board.cursor_pos
n
board.selected_piece.nil?
board.selected_piece
n
@destination
@destinaion
n
@destination
@selected_piece.class
@selected_piece.actual_possible_moves
@selected_piece.pos
@selected_piece
@destination
@start
n
s
n
c
n
s
board.selected_piece
@destination
@selected_piece.actual_possible_moves
@selected_piece.pos.actual_possible_moves
@selected_piece.pos
@board.cursor_pos
@destination
c
n
@destination
@start
n
selected_piece.class
selected_piece.pos
selected_piece
board.selected_piece.pos
board.selected_piece
board.cursor_pos
@destination
@start
c
@selected_piece.pos
@selected_piece
c
n
s
@selected_piece.pos
@selected_piece
c
@selected_piece
exit
@start
selected_piece
exit
@white_pieces.select {|piece| piece.can_move?}.sample.pos
@white_pieces.select {|piece| piece.can_move?}.sample
@white_pieces.select {|piece| piece.can_move?}.count.sample
@white_pieces.select {|piece| piece.can_move?}.count
@white_pieces.select {|piece| piece.can_move?}
white_pieces.last.can_move?
white_pieces.first.can_move?
white_pieces.first.class
white_pieces.first
white_pieces.count
white_pieces.last.class
white_pieces.first.class
self[0,0].class
self[0,0]
self.class
self
white_pieces
exit
white_pieces
exit
@white_pieces
white_pieces
exit
self
exit
selected_piece
current_player.colour
current_player
c
n
current_player
player1.colour
player1
exit
player1
@current_player
current_player
quit
cursor_pos
current_player
q
self[0,4].class
self[0,4]
self[0,3]
self
